{
  "name": "Bugsnag-laravel",
  "tagline": "Bugsnag notifier for the Laravel PHP framework",
  "body": "Bugsnag Notifier for Laravel and Lumen\r\n=====================================\r\n\r\nThe Bugsnag Notifier for Laravel gives you instant notification of errors and\r\nexceptions in your Laravel PHP applications. We support Laravel 5, Laravel 4, Laravel 3, and Lumen.\r\n\r\n[Bugsnag](https://bugsnag.com) captures errors in real-time from your web, \r\nmobile and desktop applications, helping you to understand and resolve them \r\nas fast as possible. [Create a free account](https://bugsnag.com) to start \r\ncapturing errors from your applications.\r\n\r\nCheck out this excellent [Laracasts screencast](https://laracasts.com/lessons/better-error-tracking-with-bugsnag) for a quick overview of how to use Bugsnag with your Laravel apps.\r\n\r\n\r\nHow to Install \r\n---------------\r\n\r\n### Laravel\r\n\r\n1.  Install the `bugsnag/bugsnag-laravel` package\r\n\r\n    ```shell\r\n    $ composer require bugsnag/bugsnag-laravel:1.*\r\n    ```\r\n\r\n2. Update `config/app.php` (or `app/config/app.php` for Laravel 4) to activate Bugsnag\r\n\r\n    ```php\r\n    # Add `BugsnagLaravelServiceProvider` to the `providers` array\r\n    'providers' => array(\r\n        ...\r\n        'Bugsnag\\BugsnagLaravel\\BugsnagLaravelServiceProvider',\r\n    )\r\n\r\n    # Add the `BugsnagFacade` to the `aliases` array\r\n    'aliases' => array(\r\n        ...\r\n        'Bugsnag' => 'Bugsnag\\BugsnagLaravel\\BugsnagFacade',\r\n    )\r\n    ```\r\n\r\n3. (Laravel 5 only) Use the Bugsnag exception handler from `App/Exceptions/Handler.php`.\r\n\r\n    ```php\r\n    # DELETE this line\r\n    use Illuminate\\Foundation\\Exceptions\\Handler as ExceptionHandler;\r\n    ```\r\n\r\n    ```php\r\n    # ADD this line instead\r\n    use Bugsnag\\BugsnagLaravel\\BugsnagExceptionHandler as ExceptionHandler;\r\n    ```\r\n\r\n    After this change, your file should look like this:\r\n\r\n    ```php\r\n    <?php namespace App\\Exceptions;\r\n\r\n    use Exception;\r\n    use Bugsnag\\BugsnagLaravel\\BugsnagExceptionHandler as ExceptionHandler;\r\n\r\n    class Handler extends ExceptionHandler {\r\n        ...\r\n    }\r\n\r\n    ```\r\n\r\n#### Configuration (Laravel 5)\r\n\r\n1. Create a file `config/bugsnag.php` that contains your API key:\r\n\r\n2. Configure your `api_key`:\r\n\r\n    ```php\r\n    <?php # config/bugsnag.php\r\n\r\n    return array(\r\n        'api_key' => 'YOUR-API-KEY-HERE'\r\n    );\r\n    ```\r\n\r\n3.  Optionally, you can add the `notify_release_stages` key to the same file\r\n    above to define which Laravel environments will send Exceptions to Bugsnag.\r\n\r\n    ```php\r\n    return array(\r\n        'api_key' => 'YOUR-API-KEY-HERE',\r\n        'notify_release_stages' => ['production', 'staging']\r\n    );\r\n    ```\r\n\r\n#### Configuration (Laravel 3,4)\r\n\r\n1.  Generate a template Bugsnag config file\r\n\r\n    ```shell\r\n    $ php artisan config:publish bugsnag/bugsnag-laravel\r\n    ```\r\n\r\n2.  Update `app/config/packages/bugsnag/bugsnag-laravel/config.php` with your\r\n    Bugsnag API key:\r\n\r\n    ```php\r\n    return array(\r\n        'api_key' => 'YOUR-API-KEY-HERE'\r\n    );\r\n    ```\r\n\r\n3.  Optionally, you can add the `notify_release_stages` key to the same file\r\n    above to define which Laravel environments will send Exceptions to Bugsnag.\r\n\r\n    ```php\r\n    return array(\r\n        'api_key' => 'YOUR-API-KEY-HERE',\r\n        'notify_release_stages' => ['production', 'staging']\r\n    );\r\n    ```\r\n\r\n    \r\n### Lumen\r\n\r\n1. In `bootstrap/app.php` add the line\r\n    \r\n    ```php\r\n    $app->register('Bugsnag\\BugsnagLaravel\\BugsnagLaravelServiceProvider');\r\n    ```\r\n    \r\n    just before the line \r\n    \r\n    ```php\r\n    require __DIR__ . '/../app/Http/routes.php';\r\n    ```\r\n    \r\n2. Change the function `report` in `app/Exceptions/Handler.php` to look like this:\r\n    \r\n    ```php\r\n    public function report(Exception $e) {\r\n        app('bugsnag')->notifyException($e, []);\r\n        return parent::report($e);\r\n    }\r\n    ```\r\n\r\n3. Create a file `config/bugsnag.php` that contains your API key\r\n\r\n    ```php\r\n    <?php # config/bugsnag.php\r\n\r\n    return array(\r\n        'api_key' => 'YOUR-API-KEY-HERE'\r\n    );\r\n    ```\r\n    \r\n\r\n\r\n\r\nSending Custom Data With Exceptions\r\n-----------------------------------\r\n\r\nIt is often useful to send additional meta-data about your app, such as \r\ninformation about the currently logged in user, along with any\r\nerror or exceptions, to help debug problems. \r\n\r\nTo send custom data, you should define a *before-notify* function, \r\nadding an array of \"tabs\" of custom data to the $metaData parameter. For example:\r\n\r\n```php\r\nBugsnag::setBeforeNotifyFunction(\"before_bugsnag_notify\");\r\n\r\nfunction before_bugsnag_notify($error) {\r\n    // Do any custom error handling here\r\n\r\n    // Also add some meta data to each error\r\n    $error->setMetaData(array(\r\n        \"user\" => array(\r\n            \"name\" => \"James\",\r\n            \"email\" => \"james@example.com\"\r\n        )\r\n    ));\r\n}\r\n```\r\n\r\nSee the [setBeforeNotifyFunction](https://bugsnag.com/docs/notifiers/php#setbeforenotifyfunction)\r\ndocumentation on the `bugsnag-php` library for more information.\r\n\r\n\r\nSending Custom Errors or Non-Fatal Exceptions\r\n---------------------------------------------\r\n\r\nYou can easily tell Bugsnag about non-fatal or caught exceptions by \r\ncalling `Bugsnag::notifyException`:\r\n\r\n```php\r\nBugsnag::notifyException(new Exception(\"Something bad happened\"));\r\n```\r\n\r\nYou can also send custom errors to Bugsnag with `Bugsnag::notifyError`:\r\n\r\n```php\r\nBugsnag::notifyError(\"ErrorType\", \"Something bad happened here too\");\r\n```\r\n\r\nBoth of these functions can also be passed an optional `$metaData` parameter,\r\nwhich should take the following format:\r\n\r\n```php\r\n$metaData =  array(\r\n    \"user\" => array(\r\n        \"name\" => \"James\",\r\n        \"email\" => \"james@example.com\"\r\n    )\r\n);\r\n```\r\n\r\n\r\nError Reporting Levels\r\n----------------------\r\n\r\nBy default we'll use the value of `error_reporting` from your `php.ini`\r\nor any value you set at runtime using the `error_reporting(...)` function.\r\n\r\nIf you'd like to send different levels of errors to Bugsnag, you can call\r\n`setErrorReportingLevel`, for example:\r\n\r\n```php\r\nBugsnag::setErrorReportingLevel(E_ALL & ~E_NOTICE);\r\n```\r\n\r\n\r\nAdditional Configuration\r\n------------------------\r\n\r\nThe [Bugsnag PHP Client](https://bugsnag.com/docs/notifiers/php)\r\nis available as `Bugsnag`, which allows you to set various\r\nconfiguration options, for example:\r\n\r\n```php\r\nBugsnag::setReleaseStage(\"production\");\r\n```\r\n\r\nSee the [Bugsnag Notifier for PHP documentation](https://bugsnag.com/docs/notifiers/php#additional-configuration)\r\nfor full configuration details.\r\n\r\n\r\nReporting Bugs or Feature Requests\r\n----------------------------------\r\n\r\nPlease report any bugs or feature requests on the github issues page for this\r\nproject here:\r\n\r\n<https://github.com/bugsnag/bugsnag-laravel/issues>\r\n\r\n\r\nContributing\r\n------------\r\n\r\n-   [Fork](https://help.github.com/articles/fork-a-repo) the [notifier on github](https://github.com/bugsnag/bugsnag-laravel)\r\n-   Commit and push until you are happy with your contribution\r\n-   Run the tests to make sure they all pass: `composer install && ./vendor/bin/phpunit`\r\n-   [Make a pull request](https://help.github.com/articles/using-pull-requests)\r\n-   Thanks!\r\n\r\n\r\nLicense\r\n-------\r\n\r\nThe Bugsnag Laravel notifier is free software released under the MIT License. \r\nSee [LICENSE.txt](https://github.com/bugsnag/bugsnag-laravel/blob/master/LICENSE.txt) for details.\r\n",
  "google": "UA-64586508-1",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}